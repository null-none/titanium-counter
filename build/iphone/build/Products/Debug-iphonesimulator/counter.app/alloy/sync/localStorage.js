/*
 * HTML5 localStorage sync adapter
 */
var _ = require('/alloy/underscore')._;

function S4() {
  return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
}

function guid() {
  return S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4();
}

function InitAdapter() {
  if (!false) {
    throw 'localStorage persistence supported only with MobileWeb.';
  }
}

function Sync(method, model, opts) {
  var name = model.config.adapter.collection_name,
  data = model.config.data,
  resp = null;

  function storeModel(data) {
    localStorage.setItem(name, JSON.stringify(data));
  }

  switch (method) {

    case 'create':
      if (!model.id) {
        model.id = guid();
        model.set(model.idAttribute, model.id);
      }
      data[model.id] = model;
      storeModel(data);
      resp = model.toJSON();
      break;

    case 'read':
      var store = localStorage.getItem(name);
      var store_data = store && JSON.parse(store) || {};

      var len = 0;
      for (var key in store_data) {
        var m = new model.config.Model(store_data[key]);
        model.models.push(m);
        len++;
      }

      model.length = len;
      if (len === 1) {
        resp = model.models[0];
      } else {
        resp = model.models;
      }
      break;

    case 'update':
      data[model.id] = model;
      storeModel(data);
      resp = model.toJSON();
      break;

    case 'delete':
      delete data[model.id];
      storeModel(data);
      resp = model.toJSON();
      break;}


  // process success/error handlers, if present
  if (resp) {
    if (_.isFunction(opts.success)) {opts.success(resp);}
    if (method === 'read') {model.trigger('fetch');}
  } else {
    if (_.isFunction(opts.error)) {opts.error(resp);}
  }
}

module.exports.sync = Sync;

module.exports.beforeModelCreate = function (config) {
  config = config || {};

  config.data = {}; // for localStorage or case where entire collection is needed to maintain store

  InitAdapter();

  return config;
};

module.exports.afterModelCreate = function (Model) {
  Model = Model || {};

  Model.prototype.config.Model = Model; // needed for fetch operations to initialize the collection from persistent store

  return Model;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvY2FsU3RvcmFnZS5qcyJdLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsIlM0IiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwiZ3VpZCIsIkluaXRBZGFwdGVyIiwiU3luYyIsIm1ldGhvZCIsIm1vZGVsIiwib3B0cyIsIm5hbWUiLCJjb25maWciLCJhZGFwdGVyIiwiY29sbGVjdGlvbl9uYW1lIiwiZGF0YSIsInJlc3AiLCJzdG9yZU1vZGVsIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJpZCIsInNldCIsImlkQXR0cmlidXRlIiwidG9KU09OIiwic3RvcmUiLCJnZXRJdGVtIiwic3RvcmVfZGF0YSIsInBhcnNlIiwibGVuIiwia2V5IiwibSIsIk1vZGVsIiwibW9kZWxzIiwicHVzaCIsImxlbmd0aCIsImlzRnVuY3Rpb24iLCJzdWNjZXNzIiwidHJpZ2dlciIsImVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsInN5bmMiLCJiZWZvcmVNb2RlbENyZWF0ZSIsImFmdGVyTW9kZWxDcmVhdGUiLCJwcm90b3R5cGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFHQSxJQUFJQSxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxtQkFBRCxDQUFQLENBQTZCRCxDQUFyQzs7QUFFQSxTQUFTRSxFQUFULEdBQWM7QUFDWixTQUFPLENBQUMsQ0FBQyxJQUFJQyxJQUFJLENBQUNDLE1BQUwsRUFBTCxJQUFzQixPQUF0QixHQUFnQyxDQUFqQyxFQUFvQ0MsUUFBcEMsQ0FBNkMsRUFBN0MsRUFBaURDLFNBQWpELENBQTJELENBQTNELENBQVA7QUFDRDs7QUFFRCxTQUFTQyxJQUFULEdBQWdCO0FBQ2QsU0FBT0wsRUFBRSxLQUFLQSxFQUFFLEVBQVQsR0FBYyxHQUFkLEdBQW9CQSxFQUFFLEVBQXRCLEdBQTJCLEdBQTNCLEdBQWlDQSxFQUFFLEVBQW5DLEdBQXdDLEdBQXhDLEdBQThDQSxFQUFFLEVBQWhELEdBQXFELEdBQXJE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YXRCLElBQWIsRUFBb0I7QUFDckQsUUFBSVIsTUFBTSxLQUFLLE1BQWYsRUFBdUIsQ0FBQ0MsS0FBSyxDQUFDOEIsT0FBTixDQUFjLE9BQWQsRUFBd0I7QUFDakQsR0FIRCxNQUdPO0FBQ0wsUUFBSXpDLENBQUMsQ0FBQ3VDLFVBQUYsQ0FBYTNCLElBQUksQ0FBQzhCLEtBQWxCLENBQUosRUFBOEIsQ0FBQzlCLElBQUksQ0FBQzhCLEtBQUwsQ0FBV3hCLElBQVgsRUFBa0I7QUFDbEQ7QUFDRjs7QUFFRHlCLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxJQUFmLEdBQXNCcEMsSUFBdEI7O0FBRUFrQyxNQUFNLENBQUNDLE9BQVAsQ0FBZUUsaUJBQWYsR0FBbUMsVUFBVWhDLE1BQVYsRUFBa0I7QUFDbkRBLEVBQUFBLE1BQU0sR0FBR0EsTUFBTSxJQUFJLEVBQW5COztBQUVBQSxFQUFBQSxNQUFNLENBQUNHLElBQVAsR0FBYyxFQUFkLENBSG1ELENBR2pDOztBQUVsQlQsRUFBQUEsV0FBVzs7QUFFWCxTQUFPTSxNQUFQO0FBQ0QsQ0FSRDs7QUFVQTZCLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlRyxnQkFBZixHQUFrQyxVQUFVWixLQUFWLEVBQWlCO0FBQ2pEQSxFQUFBQSxLQUFLLEdBQUdBLEtBQUssSUFBSSxFQUFqQjs7QUFFQUEsRUFBQUEsS0FBSyxDQUFDYSxTQUFOLENBQWdCbEMsTUFBaEIsQ0FBdUJxQixLQUF2QixHQUErQkEsS0FBL0IsQ0FIaUQsQ0FHWDs7QUFFdEMsU0FBT0EsS0FBUDtBQUNELENBTkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogSFRNTDUgbG9jYWxTdG9yYWdlIHN5bmMgYWRhcHRlclxuICovXG52YXIgXyA9IHJlcXVpcmUoJy9hbGxveS91bmRlcnNjb3JlJykuXztcblxuZnVuY3Rpb24gUzQoKSB7XG4gIHJldHVybiAoKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDAgfCAwKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDEpO1xufVxuXG5mdW5jdGlvbiBndWlkKCkge1xuICByZXR1cm4gUzQoKSArIFM0KCkgKyAnLScgKyBTNCgpICsgJy0nICsgUzQoKSArICctJyArIFM0KCkgKyAnLScgKyBTNCgpICsgUzQoKSArIFM0KCk7XG59XG5cbmZ1bmN0aW9uIEluaXRBZGFwdGVyKCkge1xuICBpZiAoIWZhbHNlKSB7XG4gICAgdGhyb3cgJ2xvY2FsU3RvcmFnZSBwZXJzaXN0ZW5jZSBzdXBwb3J0ZWQgb25seSB3aXRoIE1vYmlsZVdlYi4nO1xuICB9XG59XG5cbmZ1bmN0aW9uIFN5bmMobWV0aG9kLCBtb2RlbCwgb3B0cykge1xuICB2YXIgbmFtZSA9IG1vZGVsLmNvbmZpZy5hZGFwdGVyLmNvbGxlY3Rpb25fbmFtZSxcbiAgZGF0YSA9IG1vZGVsLmNvbmZpZy5kYXRhLFxuICByZXNwID0gbnVsbDtcblxuICBmdW5jdGlvbiBzdG9yZU1vZGVsKGRhdGEpIHtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShuYW1lLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gIH1cblxuICBzd2l0Y2ggKG1ldGhvZCkge1xuXG4gICAgY2FzZSAnY3JlYXRlJzpcbiAgICAgIGlmICghbW9kZWwuaWQpIHtcbiAgICAgICAgbW9kZWwuaWQgPSBndWlkKCk7XG4gICAgICAgIG1vZGVsLnNldChtb2RlbC5pZEF0dHJpYnV0ZSwgbW9kZWwuaWQpO1xuICAgICAgfVxuICAgICAgZGF0YVttb2RlbC5pZF0gPSBtb2RlbDtcbiAgICAgIHN0b3JlTW9kZWwoZGF0YSk7XG4gICAgICByZXNwID0gbW9kZWwudG9KU09OKCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3JlYWQnOlxuICAgICAgdmFyIHN0b3JlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0obmFtZSk7XG4gICAgICB2YXIgc3RvcmVfZGF0YSA9IHN0b3JlICYmIEpTT04ucGFyc2Uoc3RvcmUpIHx8IHt9O1xuXG4gICAgICB2YXIgbGVuID0gMDtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzdG9yZV9kYXRhKSB7XG4gICAgICAgIHZhciBtID0gbmV3IG1vZGVsLmNvbmZpZy5Nb2RlbChzdG9yZV9kYXRhW2tleV0pO1xuICAgICAgICBtb2RlbC5tb2RlbHMucHVzaChtKTtcbiAgICAgICAgbGVuKys7XG4gICAgICB9XG5cbiAgICAgIG1vZGVsLmxlbmd0aCA9IGxlbjtcbiAgICAgIGlmIChsZW4gPT09IDEpIHtcbiAgICAgICAgcmVzcCA9IG1vZGVsLm1vZGVsc1swXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3AgPSBtb2RlbC5tb2RlbHM7XG4gICAgICB9XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3VwZGF0ZSc6XG4gICAgICBkYXRhW21vZGVsLmlkXSA9IG1vZGVsO1xuICAgICAgc3RvcmVNb2RlbChkYXRhKTtcbiAgICAgIHJlc3AgPSBtb2RlbC50b0pTT04oKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnZGVsZXRlJzpcbiAgICAgIGRlbGV0ZSBkYXRhW21vZGVsLmlkXTtcbiAgICAgIHN0b3JlTW9kZWwoZGF0YSk7XG4gICAgICByZXNwID0gbW9kZWwudG9KU09OKCk7XG4gICAgICBicmVhazt9XG5cblxuICAvLyBwcm9jZXNzIHN1Y2Nlc3MvZXJyb3IgaGFuZGxlcnMsIGlmIHByZXNlbnRcbiAgaWYgKHJlc3ApIHtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKG9wdHMuc3VjY2VzcykpIHtvcHRzLnN1Y2Nlc3MocmVzcCk7fVxuICAgIGlmIChtZXRob2QgPT09ICdyZWFkJykge21vZGVsLnRyaWdnZXIoJ2ZldGNoJyk7fVxuICB9IGVsc2Uge1xuICAgIGlmIChfLmlzRnVuY3Rpb24ob3B0cy5lcnJvcikpIHtvcHRzLmVycm9yKHJlc3ApO31cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cy5zeW5jID0gU3luYztcblxubW9kdWxlLmV4cG9ydHMuYmVmb3JlTW9kZWxDcmVhdGUgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcblxuICBjb25maWcuZGF0YSA9IHt9OyAvLyBmb3IgbG9jYWxTdG9yYWdlIG9yIGNhc2Ugd2hlcmUgZW50aXJlIGNvbGxlY3Rpb24gaXMgbmVlZGVkIHRvIG1haW50YWluIHN0b3JlXG5cbiAgSW5pdEFkYXB0ZXIoKTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcblxubW9kdWxlLmV4cG9ydHMuYWZ0ZXJNb2RlbENyZWF0ZSA9IGZ1bmN0aW9uIChNb2RlbCkge1xuICBNb2RlbCA9IE1vZGVsIHx8IHt9O1xuXG4gIE1vZGVsLnByb3RvdHlwZS5jb25maWcuTW9kZWwgPSBNb2RlbDsgLy8gbmVlZGVkIGZvciBmZXRjaCBvcGVyYXRpb25zIHRvIGluaXRpYWxpemUgdGhlIGNvbGxlY3Rpb24gZnJvbSBwZXJzaXN0ZW50IHN0b3JlXG5cbiAgcmV0dXJuIE1vZGVsO1xufTsiXSwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbWl0cml5L1dvcmsvdGl0YW5pdW0vY291bnRlci9SZXNvdXJjZXMvaXBob25lL2FsbG95L3N5bmMifQ==

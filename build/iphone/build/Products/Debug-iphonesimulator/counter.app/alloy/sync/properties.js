var Alloy = require('/alloy'),
_ = require('/alloy/underscore')._,
TAP = Ti.App.Properties;

function S4() {
  return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
}

function guid() {
  return S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4();
}

function Sync(method, model, opts) {
  var prefix = model.config.adapter.collection_name ? model.config.adapter.collection_name : 'default';
  var regex = new RegExp('^(' + prefix + ')\\-(.+)$');
  var resp = null;

  if (method === 'read') {
    if (model instanceof Backbone.Collection) {
      // is collection
      var list = [];
      _.each(TAP.listProperties(), function (prop) {
        var match = prop.match(regex);
        if (match !== null) {
          list.push(TAP.getObject(prop));
        }
      });
      resp = list;
    } else {
      // is model
      var obj = TAP.getObject(prefix + '-' + model.id);
      model.set(obj);
      resp = model.toJSON();
    }
  } else if (method === 'create' || method === 'update') {
    if (!model.id) {
      model.id = guid();
      model.set(model.idAttribute, model.id);
    }
    TAP.setObject(prefix + '-' + model.id, model.toJSON() || {});
    resp = model.toJSON();
  } else if (method === 'delete') {
    TAP.removeProperty(prefix + '-' + model.id);
    model.clear();
    resp = model.toJSON();
  }

  // process success/error handlers, if present
  if (resp) {
    if (_.isFunction(opts.success)) {opts.success(resp);}
    if (method === 'read') {model.trigger('fetch');}
  } else {
    if (_.isFunction(opts.error)) {opts.error(resp);}
  }
}

module.exports.sync = Sync;
module.exports.beforeModelCreate = function (config) {
  // make sure we have a populated model object
  config = config || {};
  config.columns = config.columns || {};
  config.defaults = config.defaults || {};

  // give it a default id if it doesn't exist already
  if (typeof config.columns.id === 'undefined' || config.columns.id === null) {
    config.columns.id = 'String';
  }

  return config;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb3BlcnRpZXMuanMiXSwibmFtZXMiOlsiQWxsb3kiLCJyZXF1aXJlIiwiXyIsIlRBUCIsIlRpIiwiQXBwIiwiUHJvcGVydGllcyIsIlM0IiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwiZ3VpZCIsIlN5bmMiLCJtZXRob2QiLCJtb2RlbCIsIm9wdHMiLCJwcmVmaXgiLCJjb25maWciLCJhZGFwdGVyIiwiY29sbGVjdGlvbl9uYW1lIiwicmVnZXgiLCJSZWdFeHAiLCJyZXNwIiwiQmFja2JvbmUiLCJDb2xsZWN0aW9uIiwibGlzdCIsImVhY2giLCJsaXN0UHJvcGVydGllcyIsInByb3AiLCJtYXRjaCIsInB1c2giLCJnZXRPYmplY3QiLCJvYmoiLCJpZCIsInNldCIsInRvSlNPTiIsImlkQXR0cmlidXRlIiwic2V0T2JqZWN0IiwicmVtb3ZlUHJvcGVydHkiLCJjbGVhciIsImlzRnVuY3Rpb24iLCJzdWNjZXNzIiwidHJpZ2dlciIsImVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsInN5bmMiLCJiZWZvcmVNb2RlbENyZWF0ZSIsImNvbHVtbnMiLCJkZWZhdWx0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsUUFBRCxDQUFuQjtBQUNBQyxDQUFDLEdBQUdELE9BQU8sQ0FBQyxtQkFBRCxDQUFQLENBQTZCQyxDQURqQztBQUVBQyxHQUFHLEdBQUdDLEVBQUUsQ0FBQ0MsR0FBSCxDQUFPQyxVQUZiOztBQUlBLFNBQVNDLEVBQVQsR0FBYztBQUNaLFNBQU8sQ0FBQyxDQUFDLElBQUlDLElBQUksQ0FBQ0MsTUFBTCxFQUFMLElBQXNCLE9BQXRCLEdBQWdDLENBQWpDLEVBQW9DQyxRQUFwQyxDQUE2QyxFQUE3QyxFQUFpREMsU0FBakQsQ0FBMkQsQ0FBM0QsQ0FBUDtBQUNEOztBQUVELFNBQVNDLElBQVQsR0FBZ0I7QUFDZCxTQUFPTCxFQUFFLEtBQUtBLEVBQUUsRUFBVCxHQUFjLEdBQWQsR0FB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Q0FBYyxPQUFkLEVBQXdCO0FBQ2pELEdBSEQsTUFHTztBQUNMLFFBQUl6QyxDQUFDLENBQUN1QyxVQUFGLENBQWF6QixJQUFJLENBQUM0QixLQUFsQixDQUFKLEVBQThCLENBQUM1QixJQUFJLENBQUM0QixLQUFMLENBQVdyQixJQUFYLEVBQWtCO0FBQ2xEO0FBQ0Y7O0FBRURzQixNQUFNLENBQUNDLE9BQVAsQ0FBZUMsSUFBZixHQUFzQmxDLElBQXRCO0FBQ0FnQyxNQUFNLENBQUNDLE9BQVAsQ0FBZUUsaUJBQWYsR0FBbUMsVUFBVTlCLE1BQVYsRUFBa0I7QUFDbkQ7QUFDQUEsRUFBQUEsTUFBTSxHQUFHQSxNQUFNLElBQUksRUFBbkI7QUFDQUEsRUFBQUEsTUFBTSxDQUFDK0IsT0FBUCxHQUFpQi9CLE1BQU0sQ0FBQytCLE9BQVAsSUFBa0IsRUFBbkM7QUFDQS9CLEVBQUFBLE1BQU0sQ0FBQ2dDLFFBQVAsR0FBa0JoQyxNQUFNLENBQUNnQyxRQUFQLElBQW1CLEVBQXJDOztBQUVBO0FBQ0EsTUFBSSxPQUFPaEMsTUFBTSxDQUFDK0IsT0FBUCxDQUFlZixFQUF0QixLQUE2QixXQUE3QixJQUE0Q2hCLE1BQU0sQ0FBQytCLE9BQVAsQ0FBZWYsRUFBZixLQUFzQixJQUF0RSxFQUE0RTtBQUMxRWhCLElBQUFBLE1BQU0sQ0FBQytCLE9BQVAsQ0FBZWYsRUFBZixHQUFvQixRQUFwQjtBQUNEOztBQUVELFNBQU9oQixNQUFQO0FBQ0QsQ0FaRCIsInNvdXJjZXNDb250ZW50IjpbInZhciBBbGxveSA9IHJlcXVpcmUoJy9hbGxveScpLFxuXyA9IHJlcXVpcmUoJy9hbGxveS91bmRlcnNjb3JlJykuXyxcblRBUCA9IFRpLkFwcC5Qcm9wZXJ0aWVzO1xuXG5mdW5jdGlvbiBTNCgpIHtcbiAgcmV0dXJuICgoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMCB8IDApLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMSk7XG59XG5cbmZ1bmN0aW9uIGd1aWQoKSB7XG4gIHJldHVybiBTNCgpICsgUzQoKSArICctJyArIFM0KCkgKyAnLScgKyBTNCgpICsgJy0nICsgUzQoKSArICctJyArIFM0KCkgKyBTNCgpICsgUzQoKTtcbn1cblxuZnVuY3Rpb24gU3luYyhtZXRob2QsIG1vZGVsLCBvcHRzKSB7XG4gIHZhciBwcmVmaXggPSBtb2RlbC5jb25maWcuYWRhcHRlci5jb2xsZWN0aW9uX25hbWUgPyBtb2RlbC5jb25maWcuYWRhcHRlci5jb2xsZWN0aW9uX25hbWUgOiAnZGVmYXVsdCc7XG4gIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIHByZWZpeCArICcpXFxcXC0oLispJCcpO1xuICB2YXIgcmVzcCA9IG51bGw7XG5cbiAgaWYgKG1ldGhvZCA9PT0gJ3JlYWQnKSB7XG4gICAgaWYgKG1vZGVsIGluc3RhbmNlb2YgQmFja2JvbmUuQ29sbGVjdGlvbikge1xuICAgICAgLy8gaXMgY29sbGVjdGlvblxuICAgICAgdmFyIGxpc3QgPSBbXTtcbiAgICAgIF8uZWFjaChUQVAubGlzdFByb3BlcnRpZXMoKSwgZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgdmFyIG1hdGNoID0gcHJvcC5tYXRjaChyZWdleCk7XG4gICAgICAgIGlmIChtYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICAgIGxpc3QucHVzaChUQVAuZ2V0T2JqZWN0KHByb3ApKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXNwID0gbGlzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaXMgbW9kZWxcbiAgICAgIHZhciBvYmogPSBUQVAuZ2V0T2JqZWN0KHByZWZpeCArICctJyArIG1vZGVsLmlkKTtcbiAgICAgIG1vZGVsLnNldChvYmopO1xuICAgICAgcmVzcCA9IG1vZGVsLnRvSlNPTigpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChtZXRob2QgPT09ICdjcmVhdGUnIHx8IG1ldGhvZCA9PT0gJ3VwZGF0ZScpIHtcbiAgICBpZiAoIW1vZGVsLmlkKSB7XG4gICAgICBtb2RlbC5pZCA9IGd1aWQoKTtcbiAgICAgIG1vZGVsLnNldChtb2RlbC5pZEF0dHJpYnV0ZSwgbW9kZWwuaWQpO1xuICAgIH1cbiAgICBUQVAuc2V0T2JqZWN0KHByZWZpeCArICctJyArIG1vZGVsLmlkLCBtb2RlbC50b0pTT04oKSB8fCB7fSk7XG4gICAgcmVzcCA9IG1vZGVsLnRvSlNPTigpO1xuICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ2RlbGV0ZScpIHtcbiAgICBUQVAucmVtb3ZlUHJvcGVydHkocHJlZml4ICsgJy0nICsgbW9kZWwuaWQpO1xuICAgIG1vZGVsLmNsZWFyKCk7XG4gICAgcmVzcCA9IG1vZGVsLnRvSlNPTigpO1xuICB9XG5cbiAgLy8gcHJvY2VzcyBzdWNjZXNzL2Vycm9yIGhhbmRsZXJzLCBpZiBwcmVzZW50XG4gIGlmIChyZXNwKSB7XG4gICAgaWYgKF8uaXNGdW5jdGlvbihvcHRzLnN1Y2Nlc3MpKSB7b3B0cy5zdWNjZXNzKHJlc3ApO31cbiAgICBpZiAobWV0aG9kID09PSAncmVhZCcpIHttb2RlbC50cmlnZ2VyKCdmZXRjaCcpO31cbiAgfSBlbHNlIHtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKG9wdHMuZXJyb3IpKSB7b3B0cy5lcnJvcihyZXNwKTt9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMuc3luYyA9IFN5bmM7XG5tb2R1bGUuZXhwb3J0cy5iZWZvcmVNb2RlbENyZWF0ZSA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgLy8gbWFrZSBzdXJlIHdlIGhhdmUgYSBwb3B1bGF0ZWQgbW9kZWwgb2JqZWN0XG4gIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgY29uZmlnLmNvbHVtbnMgPSBjb25maWcuY29sdW1ucyB8fCB7fTtcbiAgY29uZmlnLmRlZmF1bHRzID0gY29uZmlnLmRlZmF1bHRzIHx8IHt9O1xuXG4gIC8vIGdpdmUgaXQgYSBkZWZhdWx0IGlkIGlmIGl0IGRvZXNuJ3QgZXhpc3QgYWxyZWFkeVxuICBpZiAodHlwZW9mIGNvbmZpZy5jb2x1bW5zLmlkID09PSAndW5kZWZpbmVkJyB8fCBjb25maWcuY29sdW1ucy5pZCA9PT0gbnVsbCkge1xuICAgIGNvbmZpZy5jb2x1bW5zLmlkID0gJ1N0cmluZyc7XG4gIH1cblxuICByZXR1cm4gY29uZmlnO1xufTsiXSwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbWl0cml5L1dvcmsvdGl0YW5pdW0vY291bnRlci9SZXNvdXJjZXMvaXBob25lL2FsbG95L3N5bmMifQ==
